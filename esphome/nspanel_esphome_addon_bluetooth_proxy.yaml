#####################################################################################################
##### NSPANEL ESPHOME created by Blackymas - https://github.com/Blackymas/NSPanel_HA_Blueprint  #####
##### ESPHome Add-on for Bluetooth proxy                                                        #####
##### PLEASE only make changes if it is necessary and also the required knowledge is available. #####
##### For normal use with the Blueprint, no changes are necessary.                              #####
#####################################################################################################
##### ATTENTION: This will add climate elements to the core system and requires the core part.  #####
#####################################################################################################
---

substitutions:
  ##### DON'T CHANGE THIS ######
  NSPANEL_HA_BLUEPRINT_ADDON_BLUETOOTH_PROXY: "true"
  ##############################

bluetooth_proxy:
  id: ble_proxy

packages:
  climate_base_package: !include nspanel_esphome_addon_ble_tracker.yaml

script:
  - id: !extend dump_config
    then:
      - lambda: |-
          // Check if this is installed with Arduino
          #ifdef USE_ARDUINO
            #error "Invalid settings for add-on Bluetooth Proxy. Arduino framework is not supported when using Bluetooth in this project."
          #endif
          if (!id(is_uploading_tft)) {
            static const char *const TAG = "nspanel_ha_blueprint";
            ESP_LOGCONFIG(TAG, "Add-on Bluetooth Proxy:");
            ESP_LOGCONFIG(TAG, "  Mode:        %s", ble_proxy->has_active() ? "Active" : "Passive");
            ESP_LOGCONFIG(TAG, "  Connections: %i", int(ble_proxy->get_bluetooth_connections_limit() -
                                                        ble_proxy->get_bluetooth_connections_free()));
            ESP_LOGCONFIG(TAG, "  Limit:       %i", int(ble_proxy->get_bluetooth_connections_limit()));
          }

#sensor:
#  - id: ble_proxy_connections_free
#    name: BLE Proxy connections free
#    icon: mdi:bluetooth
#    entity_category: diagnostic
#    platform: template
#    lambda: return ble_proxy->get_bluetooth_connections_free();

#  - id: ble_proxy_connections_limit
#    name: BLE Proxy connections limit
#    icon: mdi:bluetooth
#    entity_category: diagnostic
#    platform: template
#    lambda: return ble_proxy->get_bluetooth_connections_limit();

text_sensor:
  - id: ble_proxy_mode
    name: BLE Proxy mode
    icon: mdi:bluetooth
    entity_category: diagnostic
    platform: template
    lambda: |-
      if (ble_proxy->has_active()) return {"Active"};
      else return {"Passive"};
# Set Wi-Fi power save mode to "LIGHT" as required for Bluetooth on ESP32
wifi:
  power_save_mode: LIGHT
...
